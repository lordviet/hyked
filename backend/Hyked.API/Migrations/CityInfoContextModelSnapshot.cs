// <auto-generated />
using System;
using Hyked.API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hyked.API.Migrations
{
    [DbContext(typeof(HykedContext))]
    partial class CityInfoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("17114131")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Hyked.API.Entities.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TimeOfOperationUtc17114131")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("log_17114131");
                });

            modelBuilder.Entity("Hyked.API.Entities.CarMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("LastModifiedUtc17114131")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PassengerSeats")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Space gray",
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 318, DateTimeKind.Unspecified).AddTicks(4034), new TimeSpan(0, 0, 0, 0, 0)),
                            Manufacturer = "Benz",
                            Model = "XLS",
                            PassengerSeats = 4,
                            UserId = 1,
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Color = "Panda",
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 318, DateTimeKind.Unspecified).AddTicks(4985), new TimeSpan(0, 0, 0, 0, 0)),
                            Manufacturer = "BMW",
                            Model = "X6",
                            PassengerSeats = 3,
                            UserId = 2,
                            Year = 2018
                        },
                        new
                        {
                            Id = 3,
                            Color = "Blue",
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 318, DateTimeKind.Unspecified).AddTicks(4995), new TimeSpan(0, 0, 0, 0, 0)),
                            Manufacturer = "Audi",
                            Model = "A3",
                            PassengerSeats = 4,
                            UserId = 3,
                            Year = 2013
                        });
                });

            modelBuilder.Entity("Hyked.API.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DepartureTimeUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModifiedUtc17114131")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 3,
                            DepartureTimeUtc = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 319, DateTimeKind.Unspecified).AddTicks(1313), new TimeSpan(0, 0, 0, 0, 0)),
                            FromLocation = "Sofia",
                            IsActive = true,
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 319, DateTimeKind.Unspecified).AddTicks(4163), new TimeSpan(0, 0, 0, 0, 0)),
                            Price = 8.0,
                            ToLocation = "Karlovo",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 3,
                            DepartureTimeUtc = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 319, DateTimeKind.Unspecified).AddTicks(4876), new TimeSpan(0, 0, 0, 0, 0)),
                            FromLocation = "Karlovo",
                            IsActive = true,
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 319, DateTimeKind.Unspecified).AddTicks(4879), new TimeSpan(0, 0, 0, 0, 0)),
                            Price = 8.0,
                            ToLocation = "Sofia",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AvailableSeats = 2,
                            DepartureTimeUtc = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 319, DateTimeKind.Unspecified).AddTicks(4885), new TimeSpan(0, 0, 0, 0, 0)),
                            FromLocation = "Haskovo",
                            IsActive = true,
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 319, DateTimeKind.Unspecified).AddTicks(4888), new TimeSpan(0, 0, 0, 0, 0)),
                            Price = 10.5,
                            ToLocation = "Plovdiv",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            AvailableSeats = 4,
                            DepartureTimeUtc = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 319, DateTimeKind.Unspecified).AddTicks(4893), new TimeSpan(0, 0, 0, 0, 0)),
                            FromLocation = "Sofia",
                            IsActive = true,
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 319, DateTimeKind.Unspecified).AddTicks(4896), new TimeSpan(0, 0, 0, 0, 0)),
                            Price = 20.0,
                            ToLocation = "Varna",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Hyked.API.Entities.TripPassenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("LastModifiedUtc17114131")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PassengerUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("TripPassengers");
                });

            modelBuilder.Entity("Hyked.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("LastModifiedUtc17114131")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 314, DateTimeKind.Unspecified).AddTicks(9811), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "password",
                            PhoneNumber = "0878501743",
                            Username = "lordviet"
                        },
                        new
                        {
                            Id = 2,
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 315, DateTimeKind.Unspecified).AddTicks(1122), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "password",
                            PhoneNumber = "0878503131",
                            Username = "Hawkins"
                        },
                        new
                        {
                            Id = 3,
                            LastModifiedUtc17114131 = new DateTimeOffset(new DateTime(2021, 6, 14, 2, 55, 47, 315, DateTimeKind.Unspecified).AddTicks(1133), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "password",
                            PhoneNumber = "0878504141",
                            Username = "Steve"
                        });
                });

            modelBuilder.Entity("Hyked.API.Entities.CarMeta", b =>
                {
                    b.HasOne("Hyked.API.Entities.User", "Owner")
                        .WithOne("Car")
                        .HasForeignKey("Hyked.API.Entities.CarMeta", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Hyked.API.Entities.Trip", b =>
                {
                    b.HasOne("Hyked.API.Entities.User", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Hyked.API.Entities.TripPassenger", b =>
                {
                    b.HasOne("Hyked.API.Entities.Trip", "Trip")
                        .WithMany("Passengers")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Hyked.API.Entities.Trip", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("Hyked.API.Entities.User", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
